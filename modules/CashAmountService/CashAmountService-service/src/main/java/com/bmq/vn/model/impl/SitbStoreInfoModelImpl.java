/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bmq.vn.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.bmq.vn.model.SitbStoreInfo;
import com.bmq.vn.model.SitbStoreInfoModel;
import com.bmq.vn.model.SitbStoreInfoSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SitbStoreInfo service. Represents a row in the &quot;sitb_store_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SitbStoreInfoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SitbStoreInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SitbStoreInfoImpl
 * @see SitbStoreInfo
 * @see SitbStoreInfoModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SitbStoreInfoModelImpl extends BaseModelImpl<SitbStoreInfo>
	implements SitbStoreInfoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sitb store info model instance should use the {@link SitbStoreInfo} interface instead.
	 */
	public static final String TABLE_NAME = "sitb_store_info";
	public static final Object[][] TABLE_COLUMNS = {
			{ "store_info_id", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "store_id", Types.BIGINT },
			{ "store_code", Types.VARCHAR },
			{ "first_quantity", Types.BIGINT },
			{ "last_quantity", Types.BIGINT },
			{ "import_quantity", Types.BIGINT },
			{ "note", Types.VARCHAR },
			{ "arising_quantity", Types.BIGINT },
			{ "pay_quantity", Types.BIGINT },
			{ "collection_date", Types.TIMESTAMP },
			{ "collector_id", Types.BIGINT },
			{ "collector_name", Types.VARCHAR },
			{ "collection_ref", Types.VARCHAR },
			{ "product_id", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("store_info_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("store_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("store_code", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("first_quantity", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("last_quantity", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("import_quantity", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("arising_quantity", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("pay_quantity", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("collection_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("collector_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("collector_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("collection_ref", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("product_id", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table sitb_store_info (store_info_id LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,store_id LONG,store_code VARCHAR(75) null,first_quantity LONG,last_quantity LONG,import_quantity LONG,note VARCHAR(75) null,arising_quantity LONG,pay_quantity LONG,collection_date DATE null,collector_id LONG,collector_name VARCHAR(75) null,collection_ref VARCHAR(75) null,product_id LONG)";
	public static final String TABLE_SQL_DROP = "drop table sitb_store_info";
	public static final String ORDER_BY_JPQL = " ORDER BY sitbStoreInfo.store_info_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sitb_store_info.store_info_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.bmq.vn.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.bmq.vn.model.SitbStoreInfo"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.bmq.vn.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.bmq.vn.model.SitbStoreInfo"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SitbStoreInfo toModel(SitbStoreInfoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SitbStoreInfo model = new SitbStoreInfoImpl();

		model.setStore_info_id(soapModel.getStore_info_id());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStore_id(soapModel.getStore_id());
		model.setStore_code(soapModel.getStore_code());
		model.setFirst_quantity(soapModel.getFirst_quantity());
		model.setLast_quantity(soapModel.getLast_quantity());
		model.setImport_quantity(soapModel.getImport_quantity());
		model.setNote(soapModel.getNote());
		model.setArising_quantity(soapModel.getArising_quantity());
		model.setPay_quantity(soapModel.getPay_quantity());
		model.setCollection_date(soapModel.getCollection_date());
		model.setCollector_id(soapModel.getCollector_id());
		model.setCollector_name(soapModel.getCollector_name());
		model.setCollection_ref(soapModel.getCollection_ref());
		model.setProduct_id(soapModel.getProduct_id());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SitbStoreInfo> toModels(SitbStoreInfoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SitbStoreInfo> models = new ArrayList<SitbStoreInfo>(soapModels.length);

		for (SitbStoreInfoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.bmq.vn.service.util.ServiceProps.get(
				"lock.expiration.time.com.bmq.vn.model.SitbStoreInfo"));

	public SitbStoreInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _store_info_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setStore_info_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _store_info_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SitbStoreInfo.class;
	}

	@Override
	public String getModelClassName() {
		return SitbStoreInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("store_info_id", getStore_info_id());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("store_id", getStore_id());
		attributes.put("store_code", getStore_code());
		attributes.put("first_quantity", getFirst_quantity());
		attributes.put("last_quantity", getLast_quantity());
		attributes.put("import_quantity", getImport_quantity());
		attributes.put("note", getNote());
		attributes.put("arising_quantity", getArising_quantity());
		attributes.put("pay_quantity", getPay_quantity());
		attributes.put("collection_date", getCollection_date());
		attributes.put("collector_id", getCollector_id());
		attributes.put("collector_name", getCollector_name());
		attributes.put("collection_ref", getCollection_ref());
		attributes.put("product_id", getProduct_id());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long store_info_id = (Long)attributes.get("store_info_id");

		if (store_info_id != null) {
			setStore_info_id(store_info_id);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long store_id = (Long)attributes.get("store_id");

		if (store_id != null) {
			setStore_id(store_id);
		}

		String store_code = (String)attributes.get("store_code");

		if (store_code != null) {
			setStore_code(store_code);
		}

		Long first_quantity = (Long)attributes.get("first_quantity");

		if (first_quantity != null) {
			setFirst_quantity(first_quantity);
		}

		Long last_quantity = (Long)attributes.get("last_quantity");

		if (last_quantity != null) {
			setLast_quantity(last_quantity);
		}

		Long import_quantity = (Long)attributes.get("import_quantity");

		if (import_quantity != null) {
			setImport_quantity(import_quantity);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}

		Long arising_quantity = (Long)attributes.get("arising_quantity");

		if (arising_quantity != null) {
			setArising_quantity(arising_quantity);
		}

		Long pay_quantity = (Long)attributes.get("pay_quantity");

		if (pay_quantity != null) {
			setPay_quantity(pay_quantity);
		}

		Date collection_date = (Date)attributes.get("collection_date");

		if (collection_date != null) {
			setCollection_date(collection_date);
		}

		Long collector_id = (Long)attributes.get("collector_id");

		if (collector_id != null) {
			setCollector_id(collector_id);
		}

		String collector_name = (String)attributes.get("collector_name");

		if (collector_name != null) {
			setCollector_name(collector_name);
		}

		String collection_ref = (String)attributes.get("collection_ref");

		if (collection_ref != null) {
			setCollection_ref(collection_ref);
		}

		Long product_id = (Long)attributes.get("product_id");

		if (product_id != null) {
			setProduct_id(product_id);
		}
	}

	@JSON
	@Override
	public long getStore_info_id() {
		return _store_info_id;
	}

	@Override
	public void setStore_info_id(long store_info_id) {
		_store_info_id = store_info_id;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getStore_id() {
		return _store_id;
	}

	@Override
	public void setStore_id(long store_id) {
		_store_id = store_id;
	}

	@JSON
	@Override
	public String getStore_code() {
		if (_store_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _store_code;
		}
	}

	@Override
	public void setStore_code(String store_code) {
		_store_code = store_code;
	}

	@JSON
	@Override
	public long getFirst_quantity() {
		return _first_quantity;
	}

	@Override
	public void setFirst_quantity(long first_quantity) {
		_first_quantity = first_quantity;
	}

	@JSON
	@Override
	public long getLast_quantity() {
		return _last_quantity;
	}

	@Override
	public void setLast_quantity(long last_quantity) {
		_last_quantity = last_quantity;
	}

	@JSON
	@Override
	public long getImport_quantity() {
		return _import_quantity;
	}

	@Override
	public void setImport_quantity(long import_quantity) {
		_import_quantity = import_quantity;
	}

	@JSON
	@Override
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@JSON
	@Override
	public long getArising_quantity() {
		return _arising_quantity;
	}

	@Override
	public void setArising_quantity(long arising_quantity) {
		_arising_quantity = arising_quantity;
	}

	@JSON
	@Override
	public long getPay_quantity() {
		return _pay_quantity;
	}

	@Override
	public void setPay_quantity(long pay_quantity) {
		_pay_quantity = pay_quantity;
	}

	@JSON
	@Override
	public Date getCollection_date() {
		return _collection_date;
	}

	@Override
	public void setCollection_date(Date collection_date) {
		_collection_date = collection_date;
	}

	@JSON
	@Override
	public long getCollector_id() {
		return _collector_id;
	}

	@Override
	public void setCollector_id(long collector_id) {
		_collector_id = collector_id;
	}

	@JSON
	@Override
	public String getCollector_name() {
		if (_collector_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _collector_name;
		}
	}

	@Override
	public void setCollector_name(String collector_name) {
		_collector_name = collector_name;
	}

	@JSON
	@Override
	public String getCollection_ref() {
		if (_collection_ref == null) {
			return StringPool.BLANK;
		}
		else {
			return _collection_ref;
		}
	}

	@Override
	public void setCollection_ref(String collection_ref) {
		_collection_ref = collection_ref;
	}

	@JSON
	@Override
	public long getProduct_id() {
		return _product_id;
	}

	@Override
	public void setProduct_id(long product_id) {
		_product_id = product_id;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SitbStoreInfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SitbStoreInfo toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SitbStoreInfo)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SitbStoreInfoImpl sitbStoreInfoImpl = new SitbStoreInfoImpl();

		sitbStoreInfoImpl.setStore_info_id(getStore_info_id());
		sitbStoreInfoImpl.setCompanyId(getCompanyId());
		sitbStoreInfoImpl.setUserId(getUserId());
		sitbStoreInfoImpl.setUserName(getUserName());
		sitbStoreInfoImpl.setCreateDate(getCreateDate());
		sitbStoreInfoImpl.setModifiedDate(getModifiedDate());
		sitbStoreInfoImpl.setStore_id(getStore_id());
		sitbStoreInfoImpl.setStore_code(getStore_code());
		sitbStoreInfoImpl.setFirst_quantity(getFirst_quantity());
		sitbStoreInfoImpl.setLast_quantity(getLast_quantity());
		sitbStoreInfoImpl.setImport_quantity(getImport_quantity());
		sitbStoreInfoImpl.setNote(getNote());
		sitbStoreInfoImpl.setArising_quantity(getArising_quantity());
		sitbStoreInfoImpl.setPay_quantity(getPay_quantity());
		sitbStoreInfoImpl.setCollection_date(getCollection_date());
		sitbStoreInfoImpl.setCollector_id(getCollector_id());
		sitbStoreInfoImpl.setCollector_name(getCollector_name());
		sitbStoreInfoImpl.setCollection_ref(getCollection_ref());
		sitbStoreInfoImpl.setProduct_id(getProduct_id());

		sitbStoreInfoImpl.resetOriginalValues();

		return sitbStoreInfoImpl;
	}

	@Override
	public int compareTo(SitbStoreInfo sitbStoreInfo) {
		int value = 0;

		if (getStore_info_id() < sitbStoreInfo.getStore_info_id()) {
			value = -1;
		}
		else if (getStore_info_id() > sitbStoreInfo.getStore_info_id()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SitbStoreInfo)) {
			return false;
		}

		SitbStoreInfo sitbStoreInfo = (SitbStoreInfo)obj;

		long primaryKey = sitbStoreInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SitbStoreInfoModelImpl sitbStoreInfoModelImpl = this;

		sitbStoreInfoModelImpl._setModifiedDate = false;
	}

	@Override
	public CacheModel<SitbStoreInfo> toCacheModel() {
		SitbStoreInfoCacheModel sitbStoreInfoCacheModel = new SitbStoreInfoCacheModel();

		sitbStoreInfoCacheModel.store_info_id = getStore_info_id();

		sitbStoreInfoCacheModel.companyId = getCompanyId();

		sitbStoreInfoCacheModel.userId = getUserId();

		sitbStoreInfoCacheModel.userName = getUserName();

		String userName = sitbStoreInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			sitbStoreInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			sitbStoreInfoCacheModel.createDate = createDate.getTime();
		}
		else {
			sitbStoreInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			sitbStoreInfoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			sitbStoreInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		sitbStoreInfoCacheModel.store_id = getStore_id();

		sitbStoreInfoCacheModel.store_code = getStore_code();

		String store_code = sitbStoreInfoCacheModel.store_code;

		if ((store_code != null) && (store_code.length() == 0)) {
			sitbStoreInfoCacheModel.store_code = null;
		}

		sitbStoreInfoCacheModel.first_quantity = getFirst_quantity();

		sitbStoreInfoCacheModel.last_quantity = getLast_quantity();

		sitbStoreInfoCacheModel.import_quantity = getImport_quantity();

		sitbStoreInfoCacheModel.note = getNote();

		String note = sitbStoreInfoCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			sitbStoreInfoCacheModel.note = null;
		}

		sitbStoreInfoCacheModel.arising_quantity = getArising_quantity();

		sitbStoreInfoCacheModel.pay_quantity = getPay_quantity();

		Date collection_date = getCollection_date();

		if (collection_date != null) {
			sitbStoreInfoCacheModel.collection_date = collection_date.getTime();
		}
		else {
			sitbStoreInfoCacheModel.collection_date = Long.MIN_VALUE;
		}

		sitbStoreInfoCacheModel.collector_id = getCollector_id();

		sitbStoreInfoCacheModel.collector_name = getCollector_name();

		String collector_name = sitbStoreInfoCacheModel.collector_name;

		if ((collector_name != null) && (collector_name.length() == 0)) {
			sitbStoreInfoCacheModel.collector_name = null;
		}

		sitbStoreInfoCacheModel.collection_ref = getCollection_ref();

		String collection_ref = sitbStoreInfoCacheModel.collection_ref;

		if ((collection_ref != null) && (collection_ref.length() == 0)) {
			sitbStoreInfoCacheModel.collection_ref = null;
		}

		sitbStoreInfoCacheModel.product_id = getProduct_id();

		return sitbStoreInfoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{store_info_id=");
		sb.append(getStore_info_id());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", store_id=");
		sb.append(getStore_id());
		sb.append(", store_code=");
		sb.append(getStore_code());
		sb.append(", first_quantity=");
		sb.append(getFirst_quantity());
		sb.append(", last_quantity=");
		sb.append(getLast_quantity());
		sb.append(", import_quantity=");
		sb.append(getImport_quantity());
		sb.append(", note=");
		sb.append(getNote());
		sb.append(", arising_quantity=");
		sb.append(getArising_quantity());
		sb.append(", pay_quantity=");
		sb.append(getPay_quantity());
		sb.append(", collection_date=");
		sb.append(getCollection_date());
		sb.append(", collector_id=");
		sb.append(getCollector_id());
		sb.append(", collector_name=");
		sb.append(getCollector_name());
		sb.append(", collection_ref=");
		sb.append(getCollection_ref());
		sb.append(", product_id=");
		sb.append(getProduct_id());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("com.bmq.vn.model.SitbStoreInfo");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>store_info_id</column-name><column-value><![CDATA[");
		sb.append(getStore_info_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>store_id</column-name><column-value><![CDATA[");
		sb.append(getStore_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>store_code</column-name><column-value><![CDATA[");
		sb.append(getStore_code());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>first_quantity</column-name><column-value><![CDATA[");
		sb.append(getFirst_quantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>last_quantity</column-name><column-value><![CDATA[");
		sb.append(getLast_quantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>import_quantity</column-name><column-value><![CDATA[");
		sb.append(getImport_quantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>arising_quantity</column-name><column-value><![CDATA[");
		sb.append(getArising_quantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pay_quantity</column-name><column-value><![CDATA[");
		sb.append(getPay_quantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collection_date</column-name><column-value><![CDATA[");
		sb.append(getCollection_date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collector_id</column-name><column-value><![CDATA[");
		sb.append(getCollector_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collector_name</column-name><column-value><![CDATA[");
		sb.append(getCollector_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collection_ref</column-name><column-value><![CDATA[");
		sb.append(getCollection_ref());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>product_id</column-name><column-value><![CDATA[");
		sb.append(getProduct_id());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = SitbStoreInfo.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			SitbStoreInfo.class
		};
	private long _store_info_id;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _store_id;
	private String _store_code;
	private long _first_quantity;
	private long _last_quantity;
	private long _import_quantity;
	private String _note;
	private long _arising_quantity;
	private long _pay_quantity;
	private Date _collection_date;
	private long _collector_id;
	private String _collector_name;
	private String _collection_ref;
	private long _product_id;
	private SitbStoreInfo _escapedModel;
}
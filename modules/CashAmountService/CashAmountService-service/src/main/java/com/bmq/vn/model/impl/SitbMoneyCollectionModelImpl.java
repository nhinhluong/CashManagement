/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bmq.vn.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.bmq.vn.model.SitbMoneyCollection;
import com.bmq.vn.model.SitbMoneyCollectionModel;
import com.bmq.vn.model.SitbMoneyCollectionSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SitbMoneyCollection service. Represents a row in the &quot;sitb_money_collection&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SitbMoneyCollectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SitbMoneyCollectionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SitbMoneyCollectionImpl
 * @see SitbMoneyCollection
 * @see SitbMoneyCollectionModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SitbMoneyCollectionModelImpl extends BaseModelImpl<SitbMoneyCollection>
	implements SitbMoneyCollectionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sitb money collection model instance should use the {@link SitbMoneyCollection} interface instead.
	 */
	public static final String TABLE_NAME = "sitb_money_collection";
	public static final Object[][] TABLE_COLUMNS = {
			{ "money_collection_id", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "collection_date", Types.TIMESTAMP },
			{ "collector_username", Types.VARCHAR },
			{ "amount", Types.DOUBLE },
			{ "note", Types.VARCHAR },
			{ "store_code", Types.VARCHAR },
			{ "approval_date", Types.TIMESTAMP },
			{ "approval_username", Types.VARCHAR },
			{ "approval_status", Types.VARCHAR },
			{ "collection_ref", Types.VARCHAR },
			{ "store_type_id", Types.BIGINT },
			{ "reason_id", Types.BIGINT },
			{ "cost", Types.DOUBLE },
			{ "discountAmount", Types.DOUBLE },
			{ "transferAmount", Types.DOUBLE },
			{ "store_name", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("money_collection_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("collection_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("collector_username", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("amount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("note", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("store_code", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("approval_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("approval_username", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("approval_status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("collection_ref", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("store_type_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("reason_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cost", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("discountAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("transferAmount", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("store_name", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table sitb_money_collection (money_collection_id LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,collection_date DATE null,collector_username VARCHAR(75) null,amount DOUBLE,note VARCHAR(75) null,store_code VARCHAR(75) null,approval_date DATE null,approval_username VARCHAR(75) null,approval_status VARCHAR(75) null,collection_ref VARCHAR(75) null,store_type_id LONG,reason_id LONG,cost DOUBLE,discountAmount DOUBLE,transferAmount DOUBLE,store_name VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table sitb_money_collection";
	public static final String ORDER_BY_JPQL = " ORDER BY sitbMoneyCollection.money_collection_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sitb_money_collection.money_collection_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.bmq.vn.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.bmq.vn.model.SitbMoneyCollection"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.bmq.vn.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.bmq.vn.model.SitbMoneyCollection"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.bmq.vn.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.bmq.vn.model.SitbMoneyCollection"),
			true);
	public static final long APPROVAL_STATUS_COLUMN_BITMASK = 1L;
	public static final long MONEY_COLLECTION_ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SitbMoneyCollection toModel(SitbMoneyCollectionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SitbMoneyCollection model = new SitbMoneyCollectionImpl();

		model.setMoney_collection_id(soapModel.getMoney_collection_id());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCollection_date(soapModel.getCollection_date());
		model.setCollector_username(soapModel.getCollector_username());
		model.setAmount(soapModel.getAmount());
		model.setNote(soapModel.getNote());
		model.setStore_code(soapModel.getStore_code());
		model.setApproval_date(soapModel.getApproval_date());
		model.setApproval_username(soapModel.getApproval_username());
		model.setApproval_status(soapModel.getApproval_status());
		model.setCollection_ref(soapModel.getCollection_ref());
		model.setStore_type_id(soapModel.getStore_type_id());
		model.setReason_id(soapModel.getReason_id());
		model.setCost(soapModel.getCost());
		model.setDiscountAmount(soapModel.getDiscountAmount());
		model.setTransferAmount(soapModel.getTransferAmount());
		model.setStore_name(soapModel.getStore_name());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SitbMoneyCollection> toModels(
		SitbMoneyCollectionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SitbMoneyCollection> models = new ArrayList<SitbMoneyCollection>(soapModels.length);

		for (SitbMoneyCollectionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.bmq.vn.service.util.ServiceProps.get(
				"lock.expiration.time.com.bmq.vn.model.SitbMoneyCollection"));

	public SitbMoneyCollectionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _money_collection_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMoney_collection_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _money_collection_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SitbMoneyCollection.class;
	}

	@Override
	public String getModelClassName() {
		return SitbMoneyCollection.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("money_collection_id", getMoney_collection_id());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("collection_date", getCollection_date());
		attributes.put("collector_username", getCollector_username());
		attributes.put("amount", getAmount());
		attributes.put("note", getNote());
		attributes.put("store_code", getStore_code());
		attributes.put("approval_date", getApproval_date());
		attributes.put("approval_username", getApproval_username());
		attributes.put("approval_status", getApproval_status());
		attributes.put("collection_ref", getCollection_ref());
		attributes.put("store_type_id", getStore_type_id());
		attributes.put("reason_id", getReason_id());
		attributes.put("cost", getCost());
		attributes.put("discountAmount", getDiscountAmount());
		attributes.put("transferAmount", getTransferAmount());
		attributes.put("store_name", getStore_name());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long money_collection_id = (Long)attributes.get("money_collection_id");

		if (money_collection_id != null) {
			setMoney_collection_id(money_collection_id);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date collection_date = (Date)attributes.get("collection_date");

		if (collection_date != null) {
			setCollection_date(collection_date);
		}

		String collector_username = (String)attributes.get("collector_username");

		if (collector_username != null) {
			setCollector_username(collector_username);
		}

		Double amount = (Double)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}

		String store_code = (String)attributes.get("store_code");

		if (store_code != null) {
			setStore_code(store_code);
		}

		Date approval_date = (Date)attributes.get("approval_date");

		if (approval_date != null) {
			setApproval_date(approval_date);
		}

		String approval_username = (String)attributes.get("approval_username");

		if (approval_username != null) {
			setApproval_username(approval_username);
		}

		String approval_status = (String)attributes.get("approval_status");

		if (approval_status != null) {
			setApproval_status(approval_status);
		}

		String collection_ref = (String)attributes.get("collection_ref");

		if (collection_ref != null) {
			setCollection_ref(collection_ref);
		}

		Long store_type_id = (Long)attributes.get("store_type_id");

		if (store_type_id != null) {
			setStore_type_id(store_type_id);
		}

		Long reason_id = (Long)attributes.get("reason_id");

		if (reason_id != null) {
			setReason_id(reason_id);
		}

		Double cost = (Double)attributes.get("cost");

		if (cost != null) {
			setCost(cost);
		}

		Double discountAmount = (Double)attributes.get("discountAmount");

		if (discountAmount != null) {
			setDiscountAmount(discountAmount);
		}

		Double transferAmount = (Double)attributes.get("transferAmount");

		if (transferAmount != null) {
			setTransferAmount(transferAmount);
		}

		String store_name = (String)attributes.get("store_name");

		if (store_name != null) {
			setStore_name(store_name);
		}
	}

	@JSON
	@Override
	public long getMoney_collection_id() {
		return _money_collection_id;
	}

	@Override
	public void setMoney_collection_id(long money_collection_id) {
		_columnBitmask = -1L;

		_money_collection_id = money_collection_id;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Date getCollection_date() {
		return _collection_date;
	}

	@Override
	public void setCollection_date(Date collection_date) {
		_collection_date = collection_date;
	}

	@JSON
	@Override
	public String getCollector_username() {
		if (_collector_username == null) {
			return StringPool.BLANK;
		}
		else {
			return _collector_username;
		}
	}

	@Override
	public void setCollector_username(String collector_username) {
		_collector_username = collector_username;
	}

	@JSON
	@Override
	public double getAmount() {
		return _amount;
	}

	@Override
	public void setAmount(double amount) {
		_amount = amount;
	}

	@JSON
	@Override
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@JSON
	@Override
	public String getStore_code() {
		if (_store_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _store_code;
		}
	}

	@Override
	public void setStore_code(String store_code) {
		_store_code = store_code;
	}

	@JSON
	@Override
	public Date getApproval_date() {
		return _approval_date;
	}

	@Override
	public void setApproval_date(Date approval_date) {
		_approval_date = approval_date;
	}

	@JSON
	@Override
	public String getApproval_username() {
		if (_approval_username == null) {
			return StringPool.BLANK;
		}
		else {
			return _approval_username;
		}
	}

	@Override
	public void setApproval_username(String approval_username) {
		_approval_username = approval_username;
	}

	@JSON
	@Override
	public String getApproval_status() {
		if (_approval_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _approval_status;
		}
	}

	@Override
	public void setApproval_status(String approval_status) {
		_columnBitmask |= APPROVAL_STATUS_COLUMN_BITMASK;

		if (_originalApproval_status == null) {
			_originalApproval_status = _approval_status;
		}

		_approval_status = approval_status;
	}

	public String getOriginalApproval_status() {
		return GetterUtil.getString(_originalApproval_status);
	}

	@JSON
	@Override
	public String getCollection_ref() {
		if (_collection_ref == null) {
			return StringPool.BLANK;
		}
		else {
			return _collection_ref;
		}
	}

	@Override
	public void setCollection_ref(String collection_ref) {
		_collection_ref = collection_ref;
	}

	@JSON
	@Override
	public long getStore_type_id() {
		return _store_type_id;
	}

	@Override
	public void setStore_type_id(long store_type_id) {
		_store_type_id = store_type_id;
	}

	@JSON
	@Override
	public long getReason_id() {
		return _reason_id;
	}

	@Override
	public void setReason_id(long reason_id) {
		_reason_id = reason_id;
	}

	@JSON
	@Override
	public double getCost() {
		return _cost;
	}

	@Override
	public void setCost(double cost) {
		_cost = cost;
	}

	@JSON
	@Override
	public double getDiscountAmount() {
		return _discountAmount;
	}

	@Override
	public void setDiscountAmount(double discountAmount) {
		_discountAmount = discountAmount;
	}

	@JSON
	@Override
	public double getTransferAmount() {
		return _transferAmount;
	}

	@Override
	public void setTransferAmount(double transferAmount) {
		_transferAmount = transferAmount;
	}

	@JSON
	@Override
	public String getStore_name() {
		if (_store_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _store_name;
		}
	}

	@Override
	public void setStore_name(String store_name) {
		_store_name = store_name;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SitbMoneyCollection.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SitbMoneyCollection toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SitbMoneyCollection)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SitbMoneyCollectionImpl sitbMoneyCollectionImpl = new SitbMoneyCollectionImpl();

		sitbMoneyCollectionImpl.setMoney_collection_id(getMoney_collection_id());
		sitbMoneyCollectionImpl.setCompanyId(getCompanyId());
		sitbMoneyCollectionImpl.setUserId(getUserId());
		sitbMoneyCollectionImpl.setUserName(getUserName());
		sitbMoneyCollectionImpl.setCreateDate(getCreateDate());
		sitbMoneyCollectionImpl.setModifiedDate(getModifiedDate());
		sitbMoneyCollectionImpl.setCollection_date(getCollection_date());
		sitbMoneyCollectionImpl.setCollector_username(getCollector_username());
		sitbMoneyCollectionImpl.setAmount(getAmount());
		sitbMoneyCollectionImpl.setNote(getNote());
		sitbMoneyCollectionImpl.setStore_code(getStore_code());
		sitbMoneyCollectionImpl.setApproval_date(getApproval_date());
		sitbMoneyCollectionImpl.setApproval_username(getApproval_username());
		sitbMoneyCollectionImpl.setApproval_status(getApproval_status());
		sitbMoneyCollectionImpl.setCollection_ref(getCollection_ref());
		sitbMoneyCollectionImpl.setStore_type_id(getStore_type_id());
		sitbMoneyCollectionImpl.setReason_id(getReason_id());
		sitbMoneyCollectionImpl.setCost(getCost());
		sitbMoneyCollectionImpl.setDiscountAmount(getDiscountAmount());
		sitbMoneyCollectionImpl.setTransferAmount(getTransferAmount());
		sitbMoneyCollectionImpl.setStore_name(getStore_name());

		sitbMoneyCollectionImpl.resetOriginalValues();

		return sitbMoneyCollectionImpl;
	}

	@Override
	public int compareTo(SitbMoneyCollection sitbMoneyCollection) {
		int value = 0;

		if (getMoney_collection_id() < sitbMoneyCollection.getMoney_collection_id()) {
			value = -1;
		}
		else if (getMoney_collection_id() > sitbMoneyCollection.getMoney_collection_id()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SitbMoneyCollection)) {
			return false;
		}

		SitbMoneyCollection sitbMoneyCollection = (SitbMoneyCollection)obj;

		long primaryKey = sitbMoneyCollection.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SitbMoneyCollectionModelImpl sitbMoneyCollectionModelImpl = this;

		sitbMoneyCollectionModelImpl._setModifiedDate = false;

		sitbMoneyCollectionModelImpl._originalApproval_status = sitbMoneyCollectionModelImpl._approval_status;

		sitbMoneyCollectionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SitbMoneyCollection> toCacheModel() {
		SitbMoneyCollectionCacheModel sitbMoneyCollectionCacheModel = new SitbMoneyCollectionCacheModel();

		sitbMoneyCollectionCacheModel.money_collection_id = getMoney_collection_id();

		sitbMoneyCollectionCacheModel.companyId = getCompanyId();

		sitbMoneyCollectionCacheModel.userId = getUserId();

		sitbMoneyCollectionCacheModel.userName = getUserName();

		String userName = sitbMoneyCollectionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			sitbMoneyCollectionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			sitbMoneyCollectionCacheModel.createDate = createDate.getTime();
		}
		else {
			sitbMoneyCollectionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			sitbMoneyCollectionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			sitbMoneyCollectionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date collection_date = getCollection_date();

		if (collection_date != null) {
			sitbMoneyCollectionCacheModel.collection_date = collection_date.getTime();
		}
		else {
			sitbMoneyCollectionCacheModel.collection_date = Long.MIN_VALUE;
		}

		sitbMoneyCollectionCacheModel.collector_username = getCollector_username();

		String collector_username = sitbMoneyCollectionCacheModel.collector_username;

		if ((collector_username != null) && (collector_username.length() == 0)) {
			sitbMoneyCollectionCacheModel.collector_username = null;
		}

		sitbMoneyCollectionCacheModel.amount = getAmount();

		sitbMoneyCollectionCacheModel.note = getNote();

		String note = sitbMoneyCollectionCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			sitbMoneyCollectionCacheModel.note = null;
		}

		sitbMoneyCollectionCacheModel.store_code = getStore_code();

		String store_code = sitbMoneyCollectionCacheModel.store_code;

		if ((store_code != null) && (store_code.length() == 0)) {
			sitbMoneyCollectionCacheModel.store_code = null;
		}

		Date approval_date = getApproval_date();

		if (approval_date != null) {
			sitbMoneyCollectionCacheModel.approval_date = approval_date.getTime();
		}
		else {
			sitbMoneyCollectionCacheModel.approval_date = Long.MIN_VALUE;
		}

		sitbMoneyCollectionCacheModel.approval_username = getApproval_username();

		String approval_username = sitbMoneyCollectionCacheModel.approval_username;

		if ((approval_username != null) && (approval_username.length() == 0)) {
			sitbMoneyCollectionCacheModel.approval_username = null;
		}

		sitbMoneyCollectionCacheModel.approval_status = getApproval_status();

		String approval_status = sitbMoneyCollectionCacheModel.approval_status;

		if ((approval_status != null) && (approval_status.length() == 0)) {
			sitbMoneyCollectionCacheModel.approval_status = null;
		}

		sitbMoneyCollectionCacheModel.collection_ref = getCollection_ref();

		String collection_ref = sitbMoneyCollectionCacheModel.collection_ref;

		if ((collection_ref != null) && (collection_ref.length() == 0)) {
			sitbMoneyCollectionCacheModel.collection_ref = null;
		}

		sitbMoneyCollectionCacheModel.store_type_id = getStore_type_id();

		sitbMoneyCollectionCacheModel.reason_id = getReason_id();

		sitbMoneyCollectionCacheModel.cost = getCost();

		sitbMoneyCollectionCacheModel.discountAmount = getDiscountAmount();

		sitbMoneyCollectionCacheModel.transferAmount = getTransferAmount();

		sitbMoneyCollectionCacheModel.store_name = getStore_name();

		String store_name = sitbMoneyCollectionCacheModel.store_name;

		if ((store_name != null) && (store_name.length() == 0)) {
			sitbMoneyCollectionCacheModel.store_name = null;
		}

		return sitbMoneyCollectionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(43);

		sb.append("{money_collection_id=");
		sb.append(getMoney_collection_id());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", collection_date=");
		sb.append(getCollection_date());
		sb.append(", collector_username=");
		sb.append(getCollector_username());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", note=");
		sb.append(getNote());
		sb.append(", store_code=");
		sb.append(getStore_code());
		sb.append(", approval_date=");
		sb.append(getApproval_date());
		sb.append(", approval_username=");
		sb.append(getApproval_username());
		sb.append(", approval_status=");
		sb.append(getApproval_status());
		sb.append(", collection_ref=");
		sb.append(getCollection_ref());
		sb.append(", store_type_id=");
		sb.append(getStore_type_id());
		sb.append(", reason_id=");
		sb.append(getReason_id());
		sb.append(", cost=");
		sb.append(getCost());
		sb.append(", discountAmount=");
		sb.append(getDiscountAmount());
		sb.append(", transferAmount=");
		sb.append(getTransferAmount());
		sb.append(", store_name=");
		sb.append(getStore_name());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(67);

		sb.append("<model><model-name>");
		sb.append("com.bmq.vn.model.SitbMoneyCollection");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>money_collection_id</column-name><column-value><![CDATA[");
		sb.append(getMoney_collection_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collection_date</column-name><column-value><![CDATA[");
		sb.append(getCollection_date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collector_username</column-name><column-value><![CDATA[");
		sb.append(getCollector_username());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>store_code</column-name><column-value><![CDATA[");
		sb.append(getStore_code());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approval_date</column-name><column-value><![CDATA[");
		sb.append(getApproval_date());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approval_username</column-name><column-value><![CDATA[");
		sb.append(getApproval_username());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>approval_status</column-name><column-value><![CDATA[");
		sb.append(getApproval_status());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>collection_ref</column-name><column-value><![CDATA[");
		sb.append(getCollection_ref());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>store_type_id</column-name><column-value><![CDATA[");
		sb.append(getStore_type_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reason_id</column-name><column-value><![CDATA[");
		sb.append(getReason_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cost</column-name><column-value><![CDATA[");
		sb.append(getCost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>discountAmount</column-name><column-value><![CDATA[");
		sb.append(getDiscountAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>transferAmount</column-name><column-value><![CDATA[");
		sb.append(getTransferAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>store_name</column-name><column-value><![CDATA[");
		sb.append(getStore_name());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = SitbMoneyCollection.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			SitbMoneyCollection.class
		};
	private long _money_collection_id;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private Date _collection_date;
	private String _collector_username;
	private double _amount;
	private String _note;
	private String _store_code;
	private Date _approval_date;
	private String _approval_username;
	private String _approval_status;
	private String _originalApproval_status;
	private String _collection_ref;
	private long _store_type_id;
	private long _reason_id;
	private double _cost;
	private double _discountAmount;
	private double _transferAmount;
	private String _store_name;
	private long _columnBitmask;
	private SitbMoneyCollection _escapedModel;
}
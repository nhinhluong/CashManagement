/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bmq.vn.service.base;

import aQute.bnd.annotation.ProviderType;

import com.bmq.vn.model.CtbStoreType;
import com.bmq.vn.service.CtbStoreTypeLocalService;
import com.bmq.vn.service.persistence.CtbProductPersistence;
import com.bmq.vn.service.persistence.CtbReasonFinder;
import com.bmq.vn.service.persistence.CtbReasonPersistence;
import com.bmq.vn.service.persistence.CtbStorePersistence;
import com.bmq.vn.service.persistence.CtbStoreTypePersistence;
import com.bmq.vn.service.persistence.MtbStoreUserPersistence;
import com.bmq.vn.service.persistence.SitbMoneyCollectionFinder;
import com.bmq.vn.service.persistence.SitbMoneyCollectionPersistence;
import com.bmq.vn.service.persistence.SitbStoreInfoPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the ctb store type local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.bmq.vn.service.impl.CtbStoreTypeLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see com.bmq.vn.service.impl.CtbStoreTypeLocalServiceImpl
 * @see com.bmq.vn.service.CtbStoreTypeLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class CtbStoreTypeLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements CtbStoreTypeLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.bmq.vn.service.CtbStoreTypeLocalServiceUtil} to access the ctb store type local service.
	 */

	/**
	 * Adds the ctb store type to the database. Also notifies the appropriate model listeners.
	 *
	 * @param ctbStoreType the ctb store type
	 * @return the ctb store type that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CtbStoreType addCtbStoreType(CtbStoreType ctbStoreType) {
		ctbStoreType.setNew(true);

		return ctbStoreTypePersistence.update(ctbStoreType);
	}

	/**
	 * Creates a new ctb store type with the primary key. Does not add the ctb store type to the database.
	 *
	 * @param store_type_id the primary key for the new ctb store type
	 * @return the new ctb store type
	 */
	@Override
	public CtbStoreType createCtbStoreType(long store_type_id) {
		return ctbStoreTypePersistence.create(store_type_id);
	}

	/**
	 * Deletes the ctb store type with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param store_type_id the primary key of the ctb store type
	 * @return the ctb store type that was removed
	 * @throws PortalException if a ctb store type with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CtbStoreType deleteCtbStoreType(long store_type_id)
		throws PortalException {
		return ctbStoreTypePersistence.remove(store_type_id);
	}

	/**
	 * Deletes the ctb store type from the database. Also notifies the appropriate model listeners.
	 *
	 * @param ctbStoreType the ctb store type
	 * @return the ctb store type that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public CtbStoreType deleteCtbStoreType(CtbStoreType ctbStoreType) {
		return ctbStoreTypePersistence.remove(ctbStoreType);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(CtbStoreType.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return ctbStoreTypePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.bmq.vn.model.impl.CtbStoreTypeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return ctbStoreTypePersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.bmq.vn.model.impl.CtbStoreTypeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return ctbStoreTypePersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return ctbStoreTypePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return ctbStoreTypePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public CtbStoreType fetchCtbStoreType(long store_type_id) {
		return ctbStoreTypePersistence.fetchByPrimaryKey(store_type_id);
	}

	/**
	 * Returns the ctb store type with the primary key.
	 *
	 * @param store_type_id the primary key of the ctb store type
	 * @return the ctb store type
	 * @throws PortalException if a ctb store type with the primary key could not be found
	 */
	@Override
	public CtbStoreType getCtbStoreType(long store_type_id)
		throws PortalException {
		return ctbStoreTypePersistence.findByPrimaryKey(store_type_id);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(ctbStoreTypeLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CtbStoreType.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("store_type_id");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(ctbStoreTypeLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(CtbStoreType.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"store_type_id");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(ctbStoreTypeLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(CtbStoreType.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("store_type_id");
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return ctbStoreTypeLocalService.deleteCtbStoreType((CtbStoreType)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return ctbStoreTypePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the ctb store types.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.bmq.vn.model.impl.CtbStoreTypeModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of ctb store types
	 * @param end the upper bound of the range of ctb store types (not inclusive)
	 * @return the range of ctb store types
	 */
	@Override
	public List<CtbStoreType> getCtbStoreTypes(int start, int end) {
		return ctbStoreTypePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of ctb store types.
	 *
	 * @return the number of ctb store types
	 */
	@Override
	public int getCtbStoreTypesCount() {
		return ctbStoreTypePersistence.countAll();
	}

	/**
	 * Updates the ctb store type in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param ctbStoreType the ctb store type
	 * @return the ctb store type that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public CtbStoreType updateCtbStoreType(CtbStoreType ctbStoreType) {
		return ctbStoreTypePersistence.update(ctbStoreType);
	}

	/**
	 * Returns the ctb product local service.
	 *
	 * @return the ctb product local service
	 */
	public com.bmq.vn.service.CtbProductLocalService getCtbProductLocalService() {
		return ctbProductLocalService;
	}

	/**
	 * Sets the ctb product local service.
	 *
	 * @param ctbProductLocalService the ctb product local service
	 */
	public void setCtbProductLocalService(
		com.bmq.vn.service.CtbProductLocalService ctbProductLocalService) {
		this.ctbProductLocalService = ctbProductLocalService;
	}

	/**
	 * Returns the ctb product persistence.
	 *
	 * @return the ctb product persistence
	 */
	public CtbProductPersistence getCtbProductPersistence() {
		return ctbProductPersistence;
	}

	/**
	 * Sets the ctb product persistence.
	 *
	 * @param ctbProductPersistence the ctb product persistence
	 */
	public void setCtbProductPersistence(
		CtbProductPersistence ctbProductPersistence) {
		this.ctbProductPersistence = ctbProductPersistence;
	}

	/**
	 * Returns the ctb reason local service.
	 *
	 * @return the ctb reason local service
	 */
	public com.bmq.vn.service.CtbReasonLocalService getCtbReasonLocalService() {
		return ctbReasonLocalService;
	}

	/**
	 * Sets the ctb reason local service.
	 *
	 * @param ctbReasonLocalService the ctb reason local service
	 */
	public void setCtbReasonLocalService(
		com.bmq.vn.service.CtbReasonLocalService ctbReasonLocalService) {
		this.ctbReasonLocalService = ctbReasonLocalService;
	}

	/**
	 * Returns the ctb reason persistence.
	 *
	 * @return the ctb reason persistence
	 */
	public CtbReasonPersistence getCtbReasonPersistence() {
		return ctbReasonPersistence;
	}

	/**
	 * Sets the ctb reason persistence.
	 *
	 * @param ctbReasonPersistence the ctb reason persistence
	 */
	public void setCtbReasonPersistence(
		CtbReasonPersistence ctbReasonPersistence) {
		this.ctbReasonPersistence = ctbReasonPersistence;
	}

	/**
	 * Returns the ctb reason finder.
	 *
	 * @return the ctb reason finder
	 */
	public CtbReasonFinder getCtbReasonFinder() {
		return ctbReasonFinder;
	}

	/**
	 * Sets the ctb reason finder.
	 *
	 * @param ctbReasonFinder the ctb reason finder
	 */
	public void setCtbReasonFinder(CtbReasonFinder ctbReasonFinder) {
		this.ctbReasonFinder = ctbReasonFinder;
	}

	/**
	 * Returns the ctb store local service.
	 *
	 * @return the ctb store local service
	 */
	public com.bmq.vn.service.CtbStoreLocalService getCtbStoreLocalService() {
		return ctbStoreLocalService;
	}

	/**
	 * Sets the ctb store local service.
	 *
	 * @param ctbStoreLocalService the ctb store local service
	 */
	public void setCtbStoreLocalService(
		com.bmq.vn.service.CtbStoreLocalService ctbStoreLocalService) {
		this.ctbStoreLocalService = ctbStoreLocalService;
	}

	/**
	 * Returns the ctb store persistence.
	 *
	 * @return the ctb store persistence
	 */
	public CtbStorePersistence getCtbStorePersistence() {
		return ctbStorePersistence;
	}

	/**
	 * Sets the ctb store persistence.
	 *
	 * @param ctbStorePersistence the ctb store persistence
	 */
	public void setCtbStorePersistence(CtbStorePersistence ctbStorePersistence) {
		this.ctbStorePersistence = ctbStorePersistence;
	}

	/**
	 * Returns the ctb store type local service.
	 *
	 * @return the ctb store type local service
	 */
	public CtbStoreTypeLocalService getCtbStoreTypeLocalService() {
		return ctbStoreTypeLocalService;
	}

	/**
	 * Sets the ctb store type local service.
	 *
	 * @param ctbStoreTypeLocalService the ctb store type local service
	 */
	public void setCtbStoreTypeLocalService(
		CtbStoreTypeLocalService ctbStoreTypeLocalService) {
		this.ctbStoreTypeLocalService = ctbStoreTypeLocalService;
	}

	/**
	 * Returns the ctb store type persistence.
	 *
	 * @return the ctb store type persistence
	 */
	public CtbStoreTypePersistence getCtbStoreTypePersistence() {
		return ctbStoreTypePersistence;
	}

	/**
	 * Sets the ctb store type persistence.
	 *
	 * @param ctbStoreTypePersistence the ctb store type persistence
	 */
	public void setCtbStoreTypePersistence(
		CtbStoreTypePersistence ctbStoreTypePersistence) {
		this.ctbStoreTypePersistence = ctbStoreTypePersistence;
	}

	/**
	 * Returns the mtb store user local service.
	 *
	 * @return the mtb store user local service
	 */
	public com.bmq.vn.service.MtbStoreUserLocalService getMtbStoreUserLocalService() {
		return mtbStoreUserLocalService;
	}

	/**
	 * Sets the mtb store user local service.
	 *
	 * @param mtbStoreUserLocalService the mtb store user local service
	 */
	public void setMtbStoreUserLocalService(
		com.bmq.vn.service.MtbStoreUserLocalService mtbStoreUserLocalService) {
		this.mtbStoreUserLocalService = mtbStoreUserLocalService;
	}

	/**
	 * Returns the mtb store user persistence.
	 *
	 * @return the mtb store user persistence
	 */
	public MtbStoreUserPersistence getMtbStoreUserPersistence() {
		return mtbStoreUserPersistence;
	}

	/**
	 * Sets the mtb store user persistence.
	 *
	 * @param mtbStoreUserPersistence the mtb store user persistence
	 */
	public void setMtbStoreUserPersistence(
		MtbStoreUserPersistence mtbStoreUserPersistence) {
		this.mtbStoreUserPersistence = mtbStoreUserPersistence;
	}

	/**
	 * Returns the sitb money collection local service.
	 *
	 * @return the sitb money collection local service
	 */
	public com.bmq.vn.service.SitbMoneyCollectionLocalService getSitbMoneyCollectionLocalService() {
		return sitbMoneyCollectionLocalService;
	}

	/**
	 * Sets the sitb money collection local service.
	 *
	 * @param sitbMoneyCollectionLocalService the sitb money collection local service
	 */
	public void setSitbMoneyCollectionLocalService(
		com.bmq.vn.service.SitbMoneyCollectionLocalService sitbMoneyCollectionLocalService) {
		this.sitbMoneyCollectionLocalService = sitbMoneyCollectionLocalService;
	}

	/**
	 * Returns the sitb money collection persistence.
	 *
	 * @return the sitb money collection persistence
	 */
	public SitbMoneyCollectionPersistence getSitbMoneyCollectionPersistence() {
		return sitbMoneyCollectionPersistence;
	}

	/**
	 * Sets the sitb money collection persistence.
	 *
	 * @param sitbMoneyCollectionPersistence the sitb money collection persistence
	 */
	public void setSitbMoneyCollectionPersistence(
		SitbMoneyCollectionPersistence sitbMoneyCollectionPersistence) {
		this.sitbMoneyCollectionPersistence = sitbMoneyCollectionPersistence;
	}

	/**
	 * Returns the sitb money collection finder.
	 *
	 * @return the sitb money collection finder
	 */
	public SitbMoneyCollectionFinder getSitbMoneyCollectionFinder() {
		return sitbMoneyCollectionFinder;
	}

	/**
	 * Sets the sitb money collection finder.
	 *
	 * @param sitbMoneyCollectionFinder the sitb money collection finder
	 */
	public void setSitbMoneyCollectionFinder(
		SitbMoneyCollectionFinder sitbMoneyCollectionFinder) {
		this.sitbMoneyCollectionFinder = sitbMoneyCollectionFinder;
	}

	/**
	 * Returns the sitb store info local service.
	 *
	 * @return the sitb store info local service
	 */
	public com.bmq.vn.service.SitbStoreInfoLocalService getSitbStoreInfoLocalService() {
		return sitbStoreInfoLocalService;
	}

	/**
	 * Sets the sitb store info local service.
	 *
	 * @param sitbStoreInfoLocalService the sitb store info local service
	 */
	public void setSitbStoreInfoLocalService(
		com.bmq.vn.service.SitbStoreInfoLocalService sitbStoreInfoLocalService) {
		this.sitbStoreInfoLocalService = sitbStoreInfoLocalService;
	}

	/**
	 * Returns the sitb store info persistence.
	 *
	 * @return the sitb store info persistence
	 */
	public SitbStoreInfoPersistence getSitbStoreInfoPersistence() {
		return sitbStoreInfoPersistence;
	}

	/**
	 * Sets the sitb store info persistence.
	 *
	 * @param sitbStoreInfoPersistence the sitb store info persistence
	 */
	public void setSitbStoreInfoPersistence(
		SitbStoreInfoPersistence sitbStoreInfoPersistence) {
		this.sitbStoreInfoPersistence = sitbStoreInfoPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("com.bmq.vn.model.CtbStoreType",
			ctbStoreTypeLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"com.bmq.vn.model.CtbStoreType");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return CtbStoreTypeLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return CtbStoreType.class;
	}

	protected String getModelClassName() {
		return CtbStoreType.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = ctbStoreTypePersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.bmq.vn.service.CtbProductLocalService.class)
	protected com.bmq.vn.service.CtbProductLocalService ctbProductLocalService;
	@BeanReference(type = CtbProductPersistence.class)
	protected CtbProductPersistence ctbProductPersistence;
	@BeanReference(type = com.bmq.vn.service.CtbReasonLocalService.class)
	protected com.bmq.vn.service.CtbReasonLocalService ctbReasonLocalService;
	@BeanReference(type = CtbReasonPersistence.class)
	protected CtbReasonPersistence ctbReasonPersistence;
	@BeanReference(type = CtbReasonFinder.class)
	protected CtbReasonFinder ctbReasonFinder;
	@BeanReference(type = com.bmq.vn.service.CtbStoreLocalService.class)
	protected com.bmq.vn.service.CtbStoreLocalService ctbStoreLocalService;
	@BeanReference(type = CtbStorePersistence.class)
	protected CtbStorePersistence ctbStorePersistence;
	@BeanReference(type = CtbStoreTypeLocalService.class)
	protected CtbStoreTypeLocalService ctbStoreTypeLocalService;
	@BeanReference(type = CtbStoreTypePersistence.class)
	protected CtbStoreTypePersistence ctbStoreTypePersistence;
	@BeanReference(type = com.bmq.vn.service.MtbStoreUserLocalService.class)
	protected com.bmq.vn.service.MtbStoreUserLocalService mtbStoreUserLocalService;
	@BeanReference(type = MtbStoreUserPersistence.class)
	protected MtbStoreUserPersistence mtbStoreUserPersistence;
	@BeanReference(type = com.bmq.vn.service.SitbMoneyCollectionLocalService.class)
	protected com.bmq.vn.service.SitbMoneyCollectionLocalService sitbMoneyCollectionLocalService;
	@BeanReference(type = SitbMoneyCollectionPersistence.class)
	protected SitbMoneyCollectionPersistence sitbMoneyCollectionPersistence;
	@BeanReference(type = SitbMoneyCollectionFinder.class)
	protected SitbMoneyCollectionFinder sitbMoneyCollectionFinder;
	@BeanReference(type = com.bmq.vn.service.SitbStoreInfoLocalService.class)
	protected com.bmq.vn.service.SitbStoreInfoLocalService sitbStoreInfoLocalService;
	@BeanReference(type = SitbStoreInfoPersistence.class)
	protected SitbStoreInfoPersistence sitbStoreInfoPersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}
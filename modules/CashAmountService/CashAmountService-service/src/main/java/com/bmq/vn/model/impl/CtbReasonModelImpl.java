/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.bmq.vn.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.bmq.vn.model.CtbReason;
import com.bmq.vn.model.CtbReasonModel;
import com.bmq.vn.model.CtbReasonSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the CtbReason service. Represents a row in the &quot;ctb_reason&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CtbReasonModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CtbReasonImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CtbReasonImpl
 * @see CtbReason
 * @see CtbReasonModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class CtbReasonModelImpl extends BaseModelImpl<CtbReason>
	implements CtbReasonModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ctb reason model instance should use the {@link CtbReason} interface instead.
	 */
	public static final String TABLE_NAME = "ctb_reason";
	public static final Object[][] TABLE_COLUMNS = {
			{ "reason_id", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "reason_code", Types.VARCHAR },
			{ "reason_name", Types.VARCHAR },
			{ "status", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("reason_id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("reason_code", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reason_name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table ctb_reason (reason_id LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,reason_code VARCHAR(75) null,reason_name VARCHAR(75) null,status VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ctb_reason";
	public static final String ORDER_BY_JPQL = " ORDER BY ctbReason.reason_id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ctb_reason.reason_id ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.bmq.vn.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.bmq.vn.model.CtbReason"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.bmq.vn.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.bmq.vn.model.CtbReason"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.bmq.vn.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.bmq.vn.model.CtbReason"),
			true);
	public static final long STATUS_COLUMN_BITMASK = 1L;
	public static final long REASON_ID_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CtbReason toModel(CtbReasonSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CtbReason model = new CtbReasonImpl();

		model.setReason_id(soapModel.getReason_id());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setReason_code(soapModel.getReason_code());
		model.setReason_name(soapModel.getReason_name());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CtbReason> toModels(CtbReasonSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<CtbReason> models = new ArrayList<CtbReason>(soapModels.length);

		for (CtbReasonSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.bmq.vn.service.util.ServiceProps.get(
				"lock.expiration.time.com.bmq.vn.model.CtbReason"));

	public CtbReasonModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _reason_id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setReason_id(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _reason_id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CtbReason.class;
	}

	@Override
	public String getModelClassName() {
		return CtbReason.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("reason_id", getReason_id());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("reason_code", getReason_code());
		attributes.put("reason_name", getReason_name());
		attributes.put("status", getStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long reason_id = (Long)attributes.get("reason_id");

		if (reason_id != null) {
			setReason_id(reason_id);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String reason_code = (String)attributes.get("reason_code");

		if (reason_code != null) {
			setReason_code(reason_code);
		}

		String reason_name = (String)attributes.get("reason_name");

		if (reason_name != null) {
			setReason_name(reason_name);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getReason_id() {
		return _reason_id;
	}

	@Override
	public void setReason_id(long reason_id) {
		_columnBitmask = -1L;

		_reason_id = reason_id;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getReason_code() {
		if (_reason_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _reason_code;
		}
	}

	@Override
	public void setReason_code(String reason_code) {
		_reason_code = reason_code;
	}

	@JSON
	@Override
	public String getReason_name() {
		if (_reason_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _reason_name;
		}
	}

	@Override
	public void setReason_name(String reason_name) {
		_reason_name = reason_name;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (_originalStatus == null) {
			_originalStatus = _status;
		}

		_status = status;
	}

	public String getOriginalStatus() {
		return GetterUtil.getString(_originalStatus);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			CtbReason.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CtbReason toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (CtbReason)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CtbReasonImpl ctbReasonImpl = new CtbReasonImpl();

		ctbReasonImpl.setReason_id(getReason_id());
		ctbReasonImpl.setCompanyId(getCompanyId());
		ctbReasonImpl.setUserId(getUserId());
		ctbReasonImpl.setUserName(getUserName());
		ctbReasonImpl.setCreateDate(getCreateDate());
		ctbReasonImpl.setModifiedDate(getModifiedDate());
		ctbReasonImpl.setReason_code(getReason_code());
		ctbReasonImpl.setReason_name(getReason_name());
		ctbReasonImpl.setStatus(getStatus());

		ctbReasonImpl.resetOriginalValues();

		return ctbReasonImpl;
	}

	@Override
	public int compareTo(CtbReason ctbReason) {
		int value = 0;

		if (getReason_id() < ctbReason.getReason_id()) {
			value = -1;
		}
		else if (getReason_id() > ctbReason.getReason_id()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CtbReason)) {
			return false;
		}

		CtbReason ctbReason = (CtbReason)obj;

		long primaryKey = ctbReason.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		CtbReasonModelImpl ctbReasonModelImpl = this;

		ctbReasonModelImpl._setModifiedDate = false;

		ctbReasonModelImpl._originalStatus = ctbReasonModelImpl._status;

		ctbReasonModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CtbReason> toCacheModel() {
		CtbReasonCacheModel ctbReasonCacheModel = new CtbReasonCacheModel();

		ctbReasonCacheModel.reason_id = getReason_id();

		ctbReasonCacheModel.companyId = getCompanyId();

		ctbReasonCacheModel.userId = getUserId();

		ctbReasonCacheModel.userName = getUserName();

		String userName = ctbReasonCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ctbReasonCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ctbReasonCacheModel.createDate = createDate.getTime();
		}
		else {
			ctbReasonCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ctbReasonCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ctbReasonCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ctbReasonCacheModel.reason_code = getReason_code();

		String reason_code = ctbReasonCacheModel.reason_code;

		if ((reason_code != null) && (reason_code.length() == 0)) {
			ctbReasonCacheModel.reason_code = null;
		}

		ctbReasonCacheModel.reason_name = getReason_name();

		String reason_name = ctbReasonCacheModel.reason_name;

		if ((reason_name != null) && (reason_name.length() == 0)) {
			ctbReasonCacheModel.reason_name = null;
		}

		ctbReasonCacheModel.status = getStatus();

		String status = ctbReasonCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			ctbReasonCacheModel.status = null;
		}

		return ctbReasonCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{reason_id=");
		sb.append(getReason_id());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", reason_code=");
		sb.append(getReason_code());
		sb.append(", reason_name=");
		sb.append(getReason_name());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.bmq.vn.model.CtbReason");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>reason_id</column-name><column-value><![CDATA[");
		sb.append(getReason_id());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reason_code</column-name><column-value><![CDATA[");
		sb.append(getReason_code());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reason_name</column-name><column-value><![CDATA[");
		sb.append(getReason_name());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = CtbReason.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			CtbReason.class
		};
	private long _reason_id;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _reason_code;
	private String _reason_name;
	private String _status;
	private String _originalStatus;
	private long _columnBitmask;
	private CtbReason _escapedModel;
}